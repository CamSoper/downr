@page "/posts/{slug}"
@using downr.Models
@inject HttpClient Http
@inject DownrOptions downrOptions
@inject IJSRuntime JSRuntime

<div class="container">
    @if(PostPageModel != null)
    {
    <Header Post="PostPageModel.Post"/>
    <div class="row mb-2">
    @if(PostPageModel.PreviousPost != null)
    {
        <div class="col-md-6">
            <div class="row no-gutters border rounded overflow-hidden flex-md-row mb-4 shadow-sm h-md-250 position-relative">
                <div class="col p-4 d-flex flex-column position-static post">
                    <strong class="d-inline-block mb-2 text-primary">Previous</strong>
                    <h4 class="mb-0">@PostPageModel.PreviousPost.Title</h4>
                    <div class="mb-1 text-muted">@PostPageModel.PreviousPost.PublicationDate.ToString("MMMM dd, yyyy")</div>
                    <p class="card-text mb-auto">@PostPageModel.PreviousPost.Description</p>
                    <NavLink class="stretched-link" href="@($"/posts/{PostPageModel.PreviousPost.Slug}")">Continue reading</NavLink>
                </div>
            </div>
        </div>
    }
    @if(PostPageModel.NextPost != null)
    {
        <div class="col-md-6">
            <div class="row no-gutters border rounded overflow-hidden flex-md-row mb-4 shadow-sm h-md-250 position-relative">
                <div class="col p-4 d-flex flex-column position-static post">
                    <strong class="d-inline-block mb-2 text-success">Next</strong>
                    <h4 class="mb-0">@PostPageModel.NextPost.Title</h4>
                    <div class="mb-1 text-muted">@PostPageModel.NextPost.PublicationDate.ToString("MMMM dd, yyyy")</div>
                    <p class="mb-auto">@PostPageModel.NextPost.Title</p>
                    <NavLink class="stretched-link" href="@($"/posts/{PostPageModel.NextPost.Slug}")">Continue reading</NavLink>
                </div>
            </div>
        </div>
    }  
    </div>
    }
</div>

@if(PostPageModel != null && PostPageModel.Post != null)
{
    <main role="main" class="container">
        <div class="row no-gutters border rounded overflow-hidden flex-md-row mb-4 shadow-sm position-relative">
            <div class="col-md-12 p-4 d-flex flex-column position-static blog-main">
                <div class="blog-post">
                    <h2 class="blog-post-title">@PostPageModel.Post.Title</h2>
                    <p class="blog-post-meta">@PostPageModel.Post.PublicationDate.ToString("MMMM dd, yyyy") by <a href="#">@PostPageModel.Post.Author</a></p>
                    @((MarkupString)PostPageModel.Post.Content)
                </div>
            </div>
        </div>
        <nav class="blog-pagination">
            @if(PostPageModel.PreviousPost != null)
            {
                <NavLink class="btn btn-outline-primary" href="@($"/posts/{PostPageModel.PreviousPost.Slug}")">older</NavLink>
            }
            @if(PostPageModel.NextPost != null)
            {
                <NavLink class="btn btn-outline-primary" href="@($"/posts/{PostPageModel.NextPost.Slug}")">newer</NavLink>   
            }
        </nav>
    </main>
}

<Tracker/>

@code {
    [Parameter]
    public string Slug{ get; set; }

    public PostPageModel PostPageModel { get; set; }

    protected override Task OnInitializedAsync()
    {
        Slug = Slug ?? "";
        return Task.CompletedTask;
    }

    protected override async Task OnParametersSetAsync()
    {
        if(string.IsNullOrEmpty(Slug)) return;
        PostPageModel = await Http.GetFromJsonAsync<PostPageModel>($"{downrOptions.RootUrl}/api/post/{Slug}");
        
        if(PostPageModel != null && PostPageModel.Post != null)
        {
            await JSRuntime.InvokeVoidAsync("setTitle", $"{PostPageModel.Post.Title} - {downrOptions.Title}");
        }
    }
}