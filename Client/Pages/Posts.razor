@page "/posts/{slug}"
@using downr.Models
@inject HttpClient Http
@inject DownrOptions downrOptions
@inject IJSRuntime JSRuntime

<div class="container">
    @if(PostPageModel != null)
    {
    <Header Post="PostPageModel.Post"/>
    }
</div>

@if(PostPageModel != null && PostPageModel.Post != null)
{
<NextAndPrevious PostPageModel="PostPageModel"/>
<main role="main" class="container">
    <div class="row no-gutters border rounded overflow-hidden flex-md-row mb-4 shadow-sm position-relative">
        <div class="col-md-12 p-4 d-flex flex-column position-static blog-main">
            <div class="blog-post">
                <h2 class="blog-post-title">@PostPageModel.Post.Title</h2>
                <p class="blog-post-meta">@PostPageModel.Post.PublicationDate.ToString("MMMM dd, yyyy") by <a href="#">@PostPageModel.Post.Author</a></p>
                @((MarkupString)PostPageModel.Post.Content)
            </div>
        </div>
    </div>
</main>
<NextAndPrevious PostPageModel="PostPageModel"/>
}

<Tracker/>

@code {
    [Parameter]
    public string Slug{ get; set; }

    public PostPageModel PostPageModel { get; set; }

    protected override Task OnInitializedAsync()
    {
        Slug = Slug ?? "";
        return Task.CompletedTask;
    }

    protected override async Task OnParametersSetAsync()
    {
        if(string.IsNullOrEmpty(Slug)) return;
        PostPageModel = await Http.GetFromJsonAsync<PostPageModel>($"{downrOptions.RootUrl}/api/post/{Slug}");
        
        if(PostPageModel != null && PostPageModel.Post != null)
        {
            await JSRuntime.InvokeVoidAsync("setTitle", $"{PostPageModel.Post.Title} - {downrOptions.Title}");
        }
    }
}